"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultDriver = void 0;
const constants_js_1 = require("./constants.js");
const node_dgram_1 = require("node:dgram");
const node_os_1 = require("node:os");
const fast_fifo_js_1 = require("../fast_fifo.js");
const deferred_js_1 = require("../../deps/deno.land/std@0.177.0/async/deferred.js");
class DefaultDriver {
    constructor(family) {
        Object.defineProperty(this, "socket", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "messages", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new fast_fifo_js_1.FastFIFO(16)
        });
        Object.defineProperty(this, "family", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "address", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "hostname", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: (0, node_os_1.hostname)()
        });
        this.family = family;
        const socket = (0, node_dgram_1.createSocket)(family === "IPv4" ? "udp4" : "udp6");
        this.socket = socket;
        this.address = family === "IPv4" ? "0.0.0.0" : "::";
        socket.bind(constants_js_1.MDNS_PORT, undefined, () => {
            socket.addMembership(family === "IPv4" ? constants_js_1.MDNS_IPV4 : constants_js_1.MDNS_IPV6);
        });
        socket.on("message", (msg, rinfo) => {
            this.messages.push([
                msg,
                { hostname: rinfo.address, port: rinfo.port },
            ]);
        });
    }
    send(message) {
        return new Promise((res) => {
            this.socket.send(message, constants_js_1.MDNS_PORT, this.family === "IPv4" ? constants_js_1.MDNS_IPV4 : constants_js_1.MDNS_IPV6, () => {
                res();
            });
        });
    }
    setTTL(ttl) {
        this.socket.setMulticastTTL(ttl);
        return Promise.resolve();
    }
    setLoopback(loopback) {
        this.socket.setMulticastLoopback(loopback);
        return Promise.resolve();
    }
    receive() {
        const h = (0, deferred_js_1.deferred)();
        (async () => {
            for await (const msg of this.messages) {
                h.resolve(msg);
                break;
            }
        })();
        return h;
    }
    isOwnAddress(address) {
        const interfaces = (0, node_os_1.networkInterfaces)();
        for (const key in interfaces) {
            const intf = (0, node_os_1.networkInterfaces)()[key];
            for (const addr in intf) {
                if (addr === address) {
                    return true;
                }
            }
        }
        return false;
    }
    close() {
        this.socket.close();
    }
}
exports.DefaultDriver = DefaultDriver;
