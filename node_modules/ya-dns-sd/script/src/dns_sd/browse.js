"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.browse = void 0;
const types_js_1 = require("../decode/types.js");
const fast_fifo_js_1 = require("../fast_fifo.js");
const query_js_1 = require("../mdns/query.js");
/** Searches for DNS-SD services on the local network.
 *
 * ```
 * for await (
 *   const service of browse({
 *     multicastInterface: new MulticastInterface(),
 *     service: {
 *       protocol: "tcp",
 *       type: "http",
 *     },
 *   })
 * ) {
 *   if (service.isActive) {
 *     console.log(`ðŸ“¡ ${service.name} - ${service.host}:${service.port}`);
 *   }
 * }
 * ```
 */
function browse(opts) {
    const subName = `${opts.service.subtypes && opts.service.subtypes.length > 0
        ? `${opts.service.subtypes.map((sub) => `_${sub}`).join(".")}._sub.`
        : ""}`;
    const serviceName = `${subName}_${opts.service.type}._${opts.service.protocol}.local`;
    const questions = [
        {
            name: serviceName,
            recordType: types_js_1.ResourceType.PTR,
        },
    ];
    const ptrQuery = new query_js_1.Query(questions, opts.multicastInterface);
    if (opts.signal) {
        opts.signal.addEventListener("abort", () => {
            ptrQuery.end();
        });
    }
    const fifo = new fast_fifo_js_1.FastFIFO(16);
    const services = new Map();
    (async () => {
        for await (const event of ptrQuery) {
            switch (event.kind) {
                case "ADDED":
                    // We need to add only one
                    if ((0, types_js_1.isResourceRecordPTR)(event.record)) {
                        // iterate over a service thing and relay its events.
                        const key = event.record.RDATA.join(".");
                        if (services.has(key)) {
                            continue;
                        }
                        const service = new ServiceResolver(event.record, ptrQuery.additional(), opts.multicastInterface);
                        (async () => {
                            for await (const event of service) {
                                fifo.push(event);
                            }
                        })();
                        services.set(key, service);
                    }
                    break;
                case "EXPIRED":
                    if ((0, types_js_1.isResourceRecordPTR)(event.record)) {
                        const key = event.record.RDATA.join(".");
                        const service = services.get(key);
                        if (!service) {
                            continue;
                        }
                        service.close();
                        services.delete(key);
                    }
            }
        }
    })();
    return fifo;
}
exports.browse = browse;
class ServiceResolver {
    constructor(ptrRecord, additionalRecords, multicastInterface) {
        Object.defineProperty(this, "srvRecord", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "txtRecord", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "multicastInterface", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "hostnameQuery", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "hostnameRecord", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: null
        });
        Object.defineProperty(this, "fifo", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: new fast_fifo_js_1.FastFIFO(16)
        });
        Object.defineProperty(this, "serviceName", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.multicastInterface = multicastInterface;
        // Get SRV and text records.
        this.serviceName = ptrRecord.RDATA.join(".");
        const srvRecord = additionalRecords.find((record) => {
            return record.NAME.join(".").toUpperCase() ===
                ptrRecord.RDATA.join(".").toUpperCase() &&
                record.TYPE === types_js_1.ResourceType.SRV;
        });
        const txtRecord = additionalRecords.find((record) => {
            return record.NAME.join(".").toUpperCase() ===
                ptrRecord.RDATA.join(".").toUpperCase() &&
                record.TYPE === types_js_1.ResourceType.TXT;
        });
        const hostNameResourceType = this.multicastInterface.family === "IPv4"
            ? types_js_1.ResourceType.A
            : types_js_1.ResourceType.AAAA;
        const aRecord = additionalRecords.find((record) => {
            return record.NAME.join(".").toUpperCase() ===
                srvRecord?.RDATA.target.join(".")
                    .toUpperCase() &&
                record.TYPE === hostNameResourceType;
        });
        if (txtRecord) {
            this.resolveTxt(txtRecord);
        }
        // Ask for srv, txt if we don't have it
        if (!srvRecord || !txtRecord) {
            this.resolvePtr();
        }
        else if (srvRecord && !aRecord) {
            this.resolveSrv(srvRecord);
        }
        else if (srvRecord && aRecord) {
            this.srvRecord = srvRecord;
            this.hostnameRecord = aRecord;
            this.update();
        }
    }
    resolvePtr() {
        const query = new query_js_1.Query([
            {
                name: this.serviceName,
                recordType: types_js_1.ResourceType.SRV,
            },
            {
                name: this.serviceName,
                recordType: types_js_1.ResourceType.TXT,
            },
        ], this.multicastInterface);
        (async () => {
            for await (const event of query) {
                switch (event.kind) {
                    case "ADDED": {
                        if ((0, types_js_1.isResourceRecordTXT)(event.record)) {
                            this.resolveTxt(event.record);
                        }
                        else if ((0, types_js_1.isResourceRecordSRV)(event.record)) {
                            this.resolveSrv(event.record);
                        }
                    }
                }
                // TODO: flushed, expired.
            }
        })();
    }
    resolveTxt(record) {
        this.txtRecord = record;
        // see if we can resolve a pending promise to be yielded.
        this.update();
    }
    async resolveSrv(record) {
        // make a new query for A / AAAA record for this (use multicast interface family to determine which to ask for)
        const recordTypeToRequest = this.multicastInterface.family === "IPv4"
            ? types_js_1.ResourceType.A
            : types_js_1.ResourceType.AAAA;
        this.srvRecord = record;
        const existingQuery = this.hostnameQuery;
        if (existingQuery) {
            existingQuery.end();
        }
        const hostnameQuery = new query_js_1.Query([{
                name: record.RDATA.target.join("."),
                recordType: recordTypeToRequest,
            }], this.multicastInterface);
        this.hostnameQuery = hostnameQuery;
        for await (const event of hostnameQuery) {
            switch (event.kind) {
                case "ADDED": {
                    if ((0, types_js_1.isResourceRecordA)(event.record) ||
                        (0, types_js_1.isResourceRecordAAAA)(event.record)) {
                        this.hostnameRecord = event.record;
                        this.update();
                    }
                    break;
                }
                case "EXPIRED":
                case "FLUSHED":
                    if ((0, types_js_1.isResourceRecordA)(event.record) ||
                        (0, types_js_1.isResourceRecordAAAA)(event.record)) {
                        this.hostnameRecord = event.record;
                        this.update(true);
                    }
                    break;
            }
        }
    }
    update(wentInactive) {
        if (!this.hostnameRecord) {
            return;
        }
        if (!this.srvRecord) {
            return;
        }
        if (!this.txtRecord) {
            return;
        }
        const hostName = (0, types_js_1.isResourceRecordA)(this.hostnameRecord)
            ? this.hostnameRecord.RDATA.join(".")
            : this.hostnameRecord.RDATA;
        const { instanceName, type, subTypes, protocol } = parseServiceName(this.serviceName);
        this.fifo.push({
            name: instanceName,
            type: type,
            subtypes: subTypes,
            protocol: protocol,
            host: hostName,
            port: this.srvRecord.RDATA.port,
            txt: this.txtRecord.RDATA,
            isActive: !wentInactive,
        });
    }
    close() {
        this.update(true);
        this.fifo.close();
    }
    // Return an async iterator with events of being resolved, updated, going down.
    async *[Symbol.asyncIterator]() {
        for await (const res of this.fifo) {
            yield res;
        }
    }
}
function parseServiceName(name) {
    const parts = name.split(".");
    const domain = parts[parts.length - 1];
    const protocol = parts[parts.length - 2].replace("_", "");
    const type = parts[parts.length - 3].replace("_", "");
    const instanceName = parts[0];
    const subTypes = [];
    if (parts.length > 4) {
        // Then there are sub types.
        const subTypesLength = parts.length - 4 - 1;
        for (let i = 0; i < subTypesLength; i++) {
            subTypes.push(parts[i + 1].replace("_", ""));
        }
    }
    return {
        instanceName,
        subTypes,
        type,
        protocol: protocol,
        domain,
    };
}
