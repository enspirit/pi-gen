import { decodeMessage } from "../decode/message_decode.js";
import { encodeMessage } from "../decode/message_encode.js";
import { FastFIFO } from "../fast_fifo.js";
import { DefaultDriver } from "./default_driver.node.js";
/** An interface used to send and receive multicast messages, as well as other actions such as toggling multicast loopback.
 *
 * If no driver is specified, selects a `MulticastDriver` appropriate to the current runtime.
 */
export class MulticastInterface {
    constructor(driver) {
        Object.defineProperty(this, "driver", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "subscribers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: []
        });
        const driverToUse = driver || new DefaultDriver("IPv4");
        this.driver = driverToUse;
        const subscribers = this.subscribers;
        (async () => {
            while (true) {
                const [received, origin] = await driverToUse.receive();
                try {
                    const event = [decodeMessage(received), origin];
                    for (const subscriber of subscribers) {
                        subscriber.push(event);
                    }
                }
                catch {
                    console.warn("Could not decode a message from", origin.hostname);
                }
            }
        })();
    }
    send(message) {
        const encoded = encodeMessage(message);
        return this.driver.send(encoded);
    }
    setTTL(ttl) {
        if (this.driver.family === "IPv4") {
            this.driver.setTTL(ttl);
        }
    }
    setLoopback(loopback) {
        this.driver.setLoopback(loopback);
    }
    messages() {
        const subscriber = new FastFIFO(16);
        this.subscribers.push(subscriber);
        return subscriber;
    }
    isOwnAddress(address) {
        return this.driver.isOwnAddress(address);
    }
    get hostname() {
        return this.driver.hostname;
    }
    get family() {
        return this.driver.family;
    }
}
