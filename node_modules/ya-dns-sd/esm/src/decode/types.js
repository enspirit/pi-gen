export var Flag;
(function (Flag) {
    Flag[Flag["Disabled"] = 0] = "Disabled";
    Flag[Flag["Enabled"] = 1] = "Enabled";
})(Flag || (Flag = {}));
export var DnsClass;
(function (DnsClass) {
    /** The Internet */
    DnsClass[DnsClass["IN"] = 1] = "IN";
    /** The CSNET class (obsolete) */
    DnsClass[DnsClass["CS"] = 2] = "CS";
    /** The CHAOS class*/
    DnsClass[DnsClass["CH"] = 3] = "CH";
    /** Hesiod [Dyer 87] */
    DnsClass[DnsClass["HS"] = 4] = "HS";
    /** Any*/
    DnsClass[DnsClass["ANY"] = 255] = "ANY";
})(DnsClass || (DnsClass = {}));
/* HEADER - see RFC 1035 section 4.1.1

                                                                1  1  1  1  1  1
    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                      ID                       |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|QR|   Opcode  |AA|TC|RD|RA|   Z    |   RCODE   |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    QDCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ANCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    NSCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                    ARCOUNT                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

*/
var OpcodeFlag;
(function (OpcodeFlag) {
    /** A standard query. */
    OpcodeFlag[OpcodeFlag["Query"] = 0] = "Query";
    /** An inverse query. */
    OpcodeFlag[OpcodeFlag["IQuery"] = 1] = "IQuery";
    /** A server status request. */
    OpcodeFlag[OpcodeFlag["Status"] = 2] = "Status";
    /** Reserved for future use. */
    OpcodeFlag[OpcodeFlag["Reserved"] = 3] = "Reserved";
})(OpcodeFlag || (OpcodeFlag = {}));
export var RcodeFlag;
(function (RcodeFlag) {
    /** No error condition. */
    RcodeFlag[RcodeFlag["NoError"] = 0] = "NoError";
    /** The name server was unable to interpret the query. */
    RcodeFlag[RcodeFlag["FormatError"] = 1] = "FormatError";
    /** The name server was unable to process the query due to a problem with the name server. */
    RcodeFlag[RcodeFlag["ServerFailure"] = 2] = "ServerFailure";
    /** Meaningful only for responses from an authoritative name server, this code signifies that the domain name referenced in the query does not exist. */
    RcodeFlag[RcodeFlag["NameError"] = 3] = "NameError";
    /** The name server does not support the requested kind of query. */
    RcodeFlag[RcodeFlag["NotImplemented"] = 4] = "NotImplemented";
    /** The name server refuses to perform the specified operation for policy reasons. */
    RcodeFlag[RcodeFlag["Refused"] = 5] = "Refused";
    /** Reserved for future use. */
    RcodeFlag[RcodeFlag["Reserved"] = 6] = "Reserved";
})(RcodeFlag || (RcodeFlag = {}));
/* QUESTION SECTION see RFC 1035 section 4.1.2

                                                                 1  1  1  1  1  1
    0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                                               |
/                     QNAME                     /
/                                               /
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                     QTYPE                     |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
|                     QCLASS                    |
+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

*/
/** A DNS Resource Record type. Only record types relevant to multicast DNS are described here. */
export var ResourceType;
(function (ResourceType) {
    /** a host address */
    ResourceType[ResourceType["A"] = 1] = "A";
    /** a domain name pointer */
    ResourceType[ResourceType["PTR"] = 12] = "PTR";
    /** text strings */
    ResourceType[ResourceType["TXT"] = 16] = "TXT";
    /** A IPv6 host address*/
    ResourceType[ResourceType["AAAA"] = 28] = "AAAA";
    /** A service */
    ResourceType[ResourceType["SRV"] = 33] = "SRV";
    /** Authenticated proof of the non-existence of DNS owner names and types */
    ResourceType[ResourceType["NSEC"] = 47] = "NSEC";
    /** A request for any records */
    ResourceType[ResourceType["ANY"] = 255] = "ANY";
})(ResourceType || (ResourceType = {}));
// The area of js-has-no-pattern-matching shame
export function isResourceRecordA(rr) {
    return rr.TYPE === ResourceType.A;
}
export function isResourceRecordPTR(rr) {
    return rr.TYPE === ResourceType.PTR;
}
export function isResourceRecordTXT(rr) {
    return rr.TYPE === ResourceType.TXT;
}
export function isResourceRecordAAAA(rr) {
    return rr.TYPE === ResourceType.AAAA;
}
export function isResourceRecordSRV(rr) {
    return rr.TYPE === ResourceType.SRV;
}
export function isResourceRecordNSEC(rr) {
    return rr.TYPE === ResourceType.NSEC;
}
