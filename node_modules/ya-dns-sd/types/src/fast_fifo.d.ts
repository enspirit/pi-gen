export declare const END: unique symbol;
export declare const ERROR: unique symbol;
export type Enqueueable<T> = T | Promise<T> | typeof END | typeof ERROR;
export type Resolver<T> = (value: T | PromiseLike<T>) => void;
export type EndOptions = {
    immediately?: boolean;
    withError?: Error;
};
export declare class FastFIFO<T> {
    private hwm;
    private head;
    private tail;
    private resolve;
    constructor(hwm: number);
    push(val: Enqueueable<T>): void;
    shift(): (Enqueueable<T> & ({} | null)) | undefined;
    peek(): Enqueueable<T> | undefined;
    isEmpty(): boolean;
    close(): void;
    [Symbol.asyncIterator](): AsyncGenerator<Awaited<T> | Awaited<T & {}>, void, unknown>;
}
